# ⚠️  TEMPLATE FILE - MUST BE EDITED BY SQUIRRO
# ⚠️  DO NOT use as-is - contains placeholder values
# ⚠️  Squirro MUST customize all environment variables and configurations

name: Deploy to Squirro EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1                    # ⚠️  EDIT: Use your AWS region
  EKS_CLUSTER_NAME: YOUR_EKS_CLUSTER_NAME  # ⚠️  EDIT: Replace with actual cluster name
  ECR_REPOSITORY: uae-mxcp-server          # ⚠️  EDIT: Use your ECR repository name
  DEPLOYMENT_NAME: uae-mxcp-server         # ⚠️  EDIT: Use your K8s deployment name

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        chmod +x scripts/run_tests.sh
        ./scripts/run_tests.sh

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
    
    - name: Build and push Docker image
      run: |
        cd deployment
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        # ⚠️  EDIT: Replace YOUR_AWS_ACCOUNT_ID with actual account ID
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} YOUR_AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push YOUR_AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
    
    - name: Update EKS deployment
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
        # ⚠️  EDIT: Replace with actual deployment configuration
        # Update deployment image
        kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
          ${{ env.DEPLOYMENT_NAME }}=YOUR_AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        # Wait for rollout
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=300s
    
    - name: Test deployment
      run: |
        # Get service endpoint
        SERVICE_URL=$(kubectl get service ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Test the deployed service
        python tests/python/test_comprehensive.py \
          --transport streamable-http \
          --host "$SERVICE_URL" \
          --port 80
