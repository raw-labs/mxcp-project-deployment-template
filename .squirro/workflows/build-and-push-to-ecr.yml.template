name: Build and Push to ECR (Squirro Workflow)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      aws-creds-configured: ${{ steps.check-aws.outputs.configured }}
    steps:
      - id: check-aws
        run: |
          if [[ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && [[ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è AWS credentials not configured."
          fi

  validate-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate configuration
      run: |
        echo "üîç Validating configuration..."
        
        # Load configuration from config.env and GitHub Variables
        if [ -f "deployment/config.env" ]; then
          set -a
          source deployment/config.env
          set +a
          echo "‚úÖ Loaded defaults from deployment/config.env"
        fi
        
        # Override with GitHub Variables if set
        [ -n "${{ vars.AWS_REGION }}" ] && AWS_REGION="${{ vars.AWS_REGION }}"
        [ -n "${{ vars.AWS_ACCOUNT_ID }}" ] && AWS_ACCOUNT_ID="${{ vars.AWS_ACCOUNT_ID }}"
        [ -n "${{ vars.ECR_REPOSITORY }}" ] && ECR_REPOSITORY="${{ vars.ECR_REPOSITORY }}"
        [ -n "${{ vars.CPU_SIZE }}" ] && CPU_SIZE="${{ vars.CPU_SIZE }}"
        [ -n "${{ vars.MEMORY_SIZE }}" ] && MEMORY_SIZE="${{ vars.MEMORY_SIZE }}"
        
        # Validate required values exist (from either source)
        if [ -z "$AWS_ACCOUNT_ID" ]; then
          echo "‚ùå AWS_ACCOUNT_ID not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        if [ -z "$AWS_REGION" ]; then
          echo "‚ùå AWS_REGION not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        if [ -z "$ECR_REPOSITORY" ]; then
          echo "‚ùå ECR_REPOSITORY not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        echo "‚úÖ All required configuration values are set"
        echo "   Source: deployment/config.env + GitHub Variables overrides"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install just
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Run configuration validation
      run: |
        just validate-config

  build-and-push:
    needs: [check-secrets, validate-config]
    if: needs.check-secrets.outputs.aws-creds-configured == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Load configuration
      run: |
        echo "üìã Loading configuration..."
        # First, source defaults from config.env
        if [ -f "deployment/config.env" ]; then
          set -a  # automatically export all variables
          source deployment/config.env
          set +a
          echo "‚úÖ Loaded defaults from deployment/config.env"
        fi
        
        # Then, override with GitHub Variables if set
        if [ -n "${{ vars.AWS_REGION }}" ]; then
          export AWS_REGION="${{ vars.AWS_REGION }}"
          echo "üìù AWS_REGION overridden by GitHub Variable: $AWS_REGION"
        fi
        if [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
          export AWS_ACCOUNT_ID="${{ vars.AWS_ACCOUNT_ID }}"
          echo "üìù AWS_ACCOUNT_ID overridden by GitHub Variable: $AWS_ACCOUNT_ID"
        fi
        if [ -n "${{ vars.ECR_REPOSITORY }}" ]; then
          export ECR_REPOSITORY="${{ vars.ECR_REPOSITORY }}"
          echo "üìù ECR_REPOSITORY overridden by GitHub Variable: $ECR_REPOSITORY"
        fi
        if [ -n "${{ vars.CPU_SIZE }}" ]; then
          export CPU_SIZE="${{ vars.CPU_SIZE }}"
          echo "üìù CPU_SIZE overridden by GitHub Variable: $CPU_SIZE"
        fi
        if [ -n "${{ vars.MEMORY_SIZE }}" ]; then
          export MEMORY_SIZE="${{ vars.MEMORY_SIZE }}"
          echo "üìù MEMORY_SIZE overridden by GitHub Variable: $MEMORY_SIZE"
        fi
        
        # Export to GITHUB_ENV for subsequent steps
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> $GITHUB_ENV
        echo "CPU_SIZE=$CPU_SIZE" >> $GITHUB_ENV
        echo "MEMORY_SIZE=$MEMORY_SIZE" >> $GITHUB_ENV
        
        echo "üìä Final configuration:"
        echo "   AWS_REGION=$AWS_REGION"
        echo "   AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
        echo "   ECR_REPOSITORY=$ECR_REPOSITORY"
        echo "   CPU_SIZE=$CPU_SIZE"
        echo "   MEMORY_SIZE=$MEMORY_SIZE"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

    - name: Build and push Docker image
      run: |
        echo "üê≥ Building Docker image for Squirro..."
        echo "üì¶ Target ECR: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
        
        docker build -f deployment/Dockerfile \
          --build-arg MXCP_DATA_ACCESS_KEY_ID="${{ secrets.MXCP_DATA_ACCESS_KEY_ID }}" \
          --build-arg MXCP_DATA_SECRET_ACCESS_KEY="${{ secrets.MXCP_DATA_SECRET_ACCESS_KEY }}" \
          --build-arg OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        
        echo "‚úÖ Docker image pushed to ECR"
        echo "üîÑ External deployment system will detect and deploy automatically"