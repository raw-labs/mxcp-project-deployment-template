name: Build and Push to ECR (Squirro Workflow)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Project-specific environment variables
# TODO: Add your project's secrets here
env:
  # Example secrets (uncomment and modify for your project):
  # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
  # ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || '' }}
  # VERTEC_API_KEY: ${{ secrets.VERTEC_API_KEY || '' }}
  
  # Data access for build (if downloading data from S3)
  MXCP_DATA_ACCESS_KEY_ID: ${{ secrets.MXCP_DATA_ACCESS_KEY_ID || '' }}
  MXCP_DATA_SECRET_ACCESS_KEY: ${{ secrets.MXCP_DATA_SECRET_ACCESS_KEY || '' }}

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    outputs:
      aws-creds-configured: ${{ steps.check-aws.outputs.configured }}
    steps:
      - id: check-aws
        run: |
          if [[ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && [[ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "⚠️ AWS credentials not configured."
          fi

  validate-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate configuration
      run: |
        echo "🔍 Validating configuration..."
        
        # Load configuration from config.env and GitHub Variables
        if [ -f "deployment/config.env" ]; then
          set -a
          source deployment/config.env
          set +a
          echo "✅ Loaded defaults from deployment/config.env"
        fi
        
        # Override with GitHub Variables if set
        [ -n "${{ vars.AWS_REGION }}" ] && AWS_REGION="${{ vars.AWS_REGION }}"
        [ -n "${{ vars.AWS_ACCOUNT_ID }}" ] && AWS_ACCOUNT_ID="${{ vars.AWS_ACCOUNT_ID }}"
        [ -n "${{ vars.ECR_REPOSITORY }}" ] && ECR_REPOSITORY="${{ vars.ECR_REPOSITORY }}"
        [ -n "${{ vars.CPU_SIZE }}" ] && CPU_SIZE="${{ vars.CPU_SIZE }}"
        [ -n "${{ vars.MEMORY_SIZE }}" ] && MEMORY_SIZE="${{ vars.MEMORY_SIZE }}"
        
        # Validate required values exist (from either source)
        if [ -z "$AWS_ACCOUNT_ID" ]; then
          echo "❌ AWS_ACCOUNT_ID not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        if [ -z "$AWS_REGION" ]; then
          echo "❌ AWS_REGION not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        if [ -z "$ECR_REPOSITORY" ]; then
          echo "❌ ECR_REPOSITORY not set (neither in config.env nor GitHub Variables)"
          exit 1
        fi
        
        echo "✅ All required configuration values are set"
        echo "   Source: deployment/config.env + GitHub Variables overrides"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install just
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.local/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        # Install deployment requirements for validation
        pip install -r deployment/requirements.txt
    
    - name: Run configuration validation
      run: |
        just validate-config

  build-and-push:
    needs: [check-secrets, validate-config]
    if: needs.check-secrets.outputs.aws-creds-configured == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Load configuration
      run: |
        echo "📋 Loading configuration..."
        # First, source defaults from config.env
        if [ -f "deployment/config.env" ]; then
          set -a  # automatically export all variables
          source deployment/config.env
          set +a
          echo "✅ Loaded defaults from deployment/config.env"
        fi
        
        # Debug: Show what GitHub provides
        echo "🔍 Debug - GitHub Variables:"
        echo "   vars.AWS_REGION = '${{ vars.AWS_REGION }}'"
        echo "   vars.AWS_ACCOUNT_ID = '${{ vars.AWS_ACCOUNT_ID }}'"
        echo "   vars.ECR_REPOSITORY = '${{ vars.ECR_REPOSITORY }}'"
        
        # Then, override with GitHub Variables if set
        if [ -n "${{ vars.AWS_REGION }}" ]; then
          export AWS_REGION="${{ vars.AWS_REGION }}"
          echo "📝 AWS_REGION overridden by GitHub Variable: $AWS_REGION"
        fi
        if [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
          export AWS_ACCOUNT_ID="${{ vars.AWS_ACCOUNT_ID }}"
          echo "📝 AWS_ACCOUNT_ID overridden by GitHub Variable: $AWS_ACCOUNT_ID"
        fi
        if [ -n "${{ vars.ECR_REPOSITORY }}" ]; then
          export ECR_REPOSITORY="${{ vars.ECR_REPOSITORY }}"
          echo "📝 ECR_REPOSITORY overridden by GitHub Variable: $ECR_REPOSITORY"
        fi
        if [ -n "${{ vars.CPU_SIZE }}" ]; then
          export CPU_SIZE="${{ vars.CPU_SIZE }}"
          echo "📝 CPU_SIZE overridden by GitHub Variable: $CPU_SIZE"
        fi
        if [ -n "${{ vars.MEMORY_SIZE }}" ]; then
          export MEMORY_SIZE="${{ vars.MEMORY_SIZE }}"
          echo "📝 MEMORY_SIZE overridden by GitHub Variable: $MEMORY_SIZE"
        fi
        
        # Export to GITHUB_ENV for subsequent steps
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> $GITHUB_ENV
        echo "CPU_SIZE=$CPU_SIZE" >> $GITHUB_ENV
        echo "MEMORY_SIZE=$MEMORY_SIZE" >> $GITHUB_ENV
        
        echo "📊 Final configuration:"
        echo "   AWS_REGION=$AWS_REGION"
        echo "   AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
        echo "   ECR_REPOSITORY=$ECR_REPOSITORY"
        echo "   CPU_SIZE=$CPU_SIZE"
        echo "   MEMORY_SIZE=$MEMORY_SIZE"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install just
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
        echo "/usr/local/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        # Install project requirements if they exist
        if [ -f requirements.txt ]; then
          echo "📦 Installing project dependencies..."
          pip install -r requirements.txt
        fi
        # Install deployment requirements
        pip install -r deployment/requirements.txt
    
    - name: Prepare data before build
      run: |
        echo "📥 Preparing data outside Docker..."
        # Export credentials for data download (if needed)
        export AWS_ACCESS_KEY_ID=${{ secrets.MXCP_DATA_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.MXCP_DATA_SECRET_ACCESS_KEY }}
        
        # Download data only (no dbt needed here)
        # This will be a no-op for API projects (just creates directories)
        just prepare-data
        
        echo "✅ Data preparation complete"
    
    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image for Squirro..."
        echo "📦 Target ECR: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
        
        docker build -f deployment/Dockerfile \
          -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
    
    - name: Test Docker image with secrets
      run: |
        echo "🧪 Running full test suite with secrets..."
        # Pass environment variables to Docker, but exclude HOME which conflicts with container's HOME
        env | grep -v '^HOME=' > test.env
        
        # Run tests with environment variables
        docker run --rm \
          --env-file test.env \
          ${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
          just test-all
        
        # Clean up
        rm -f test.env
        echo "✅ All tests passed!"
    
    - name: Push to ECR
      run: |
        echo "📤 Pushing tested image to ECR..."
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        
        echo "✅ Docker image pushed to ECR"
        echo "🔄 External deployment system will detect and deploy automatically"