# Environment Variables for {{PROJECT_NAME}} MXCP Server

This document lists all environment variables and secrets required for deploying the {{PROJECT_NAME}} MXCP Server.

## Configuration Approach

This project uses a **hybrid configuration approach**:

1. **Base Configuration** (`deployment/config.env`):
   - Contains default values for all non-sensitive settings
   - Tracked in git for documentation and local testing
   - Provides sensible defaults that work for most cases

2. **GitHub Variables** (optional overrides):
   - Override specific values from config.env when needed
   - Useful for different environments (staging, production)
   - Only set these if you need different values than config.env

3. **GitHub Secrets** (required):
   - Sensitive values like API keys and credentials
   - Never stored in config.env
   - Always required to be set in GitHub

4. **Project-Specific Workflow** (`.github/workflows/deploy.yml`):
   - Each project customizes the `env:` block with its specific secrets
   - Only list the secrets YOUR project actually needs
   - Example:
     ```yaml
     env:
       OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
       YOUR_API_KEY: ${{ secrets.YOUR_API_KEY || '' }}
     ```

## Deployment Options

This project supports two deployment patterns:
- **AWS App Runner** (RAW Labs default) - Direct deployment via GitHub Actions
- **External Systems** (e.g., Kubernetes/Flux) - Build to ECR, external system handles deployment

## GitHub Repository Configuration

### Repository Variables (Settings → Variables)

Set these as GitHub repository variables for the CI/CD pipeline:

```bash
# Using GitHub CLI
# IMPORTANT: If using a fork, always add --repo flag
gh variable set AWS_ACCOUNT_ID --body "your-aws-account-id" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]
gh variable set AWS_REGION --body "your-aws-region" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]
gh variable set ECR_REPOSITORY --body "{{PROJECT_NAME}}-mxcp-server" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]
gh variable set APP_RUNNER_SERVICE --body "{{PROJECT_NAME}}-mxcp-server" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]
gh variable set CPU_SIZE --body "1 vCPU" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]
gh variable set MEMORY_SIZE --body "4 GB" [--repo your-org/{{PROJECT_NAME}}-mxcp-server]

# Note: These are OPTIONAL overrides. Base values come from deployment/config.env
# Only set these if you need to override the config.env values
# Example: Override for production deployment
# gh variable set AWS_ACCOUNT_ID --body "123456789012"
# gh variable set AWS_REGION --body "us-east-1"
```

### Repository Secrets (Settings → Secrets)

Set these as GitHub repository secrets:

```bash
# AWS Deployment Credentials
gh secret set AWS_ACCESS_KEY_ID --body "your-deployment-key"
gh secret set AWS_SECRET_ACCESS_KEY --body "your-deployment-secret"

# Data Access Credentials (if downloading data from S3/external sources)
gh secret set MXCP_DATA_ACCESS_KEY_ID --body "your-data-key"
gh secret set MXCP_DATA_SECRET_ACCESS_KEY --body "your-data-secret"

# LLM API Keys (optional - for AI functionality)
gh secret set OPENAI_API_KEY --body "your-openai-key"
gh secret set ANTHROPIC_API_KEY --body "your-anthropic-key"
```

## Runtime Environment Variables

These are configured in `deployment/mxcp-user-config.yml` and can be set at runtime:

### Required Variables

| Variable | Description | Example | Secret |
|----------|-------------|---------|--------|
| `OPENAI_API_KEY` | OpenAI API key for GPT models | `sk-...` | Yes |
| `ANTHROPIC_API_KEY` | Anthropic API key for Claude models | `sk-ant-...` | Yes |

### Optional Variables (Project-Specific)

| Variable | Description | Example | Secret |
|----------|-------------|---------|--------|
| `DATABASE_URL` | Database connection string | `postgresql://...` | Yes |
| `REDIS_URL` | Redis connection string | `redis://...` | Yes |
| `API_BASE_URL` | External API endpoint | `https://api.example.com` | No |
| `WEBHOOK_SECRET` | Webhook validation secret | `whsec_...` | Yes |

## Data Source Configuration

Depending on your data strategy:

### Static Data
No additional environment variables needed - data is included in the repository.

### Downloaded Data (S3)
- `MXCP_DATA_ACCESS_KEY_ID` - AWS access key for S3 bucket
- `MXCP_DATA_SECRET_ACCESS_KEY` - AWS secret key for S3 bucket

### Live API Integration
Configure API credentials in your tool implementations.

## Local Development

For local development, create a `.env` file (DO NOT commit):

```bash
# Copy from .env.example
cp .env.example .env

# Edit with your values
vim .env
```

## Deployment Verification

After setting up environment variables:

1. **Verify GitHub secrets:**
   ```bash
   gh secret list
   gh variable list
   ```

2. **Test locally:**
   ```bash
   export $(cat .env | xargs)
   just full-pipeline
   ```

3. **Deploy:**
   ```bash
   git push origin main
   ```

## External Deployment Systems (Kubernetes/Flux)

If using an external deployment system instead of App Runner:

### What Your System Should Expect

**Container Configuration:**
- **Port**: 8000 (health checks and MCP endpoint)
- **Health check**: `GET /health` returns 200 OK
- **MCP endpoint**: `POST /mcp` for JSON-RPC protocol
- **Environment**: Pass runtime secrets via environment variables

### Flux/ArgoCD Integration

Your deployment system will:
1. Monitor ECR for new images (pushed by GitHub Actions)
2. Automatically update Kubernetes deployments
3. Handle rolling updates with health checks
4. Manage secrets via Kubernetes secrets or external secret operators

### Important Notes for External Teams

- The `APP_RUNNER_SERVICE` variable can be ignored (App Runner specific)
- Focus on ECR repository configuration
- Ensure your deployment system has ECR pull permissions
- Container expects environment variables for all secrets

## Security Best Practices

- ✅ Never commit secrets to the repository
- ✅ Use GitHub Secrets for sensitive values
- ✅ Rotate API keys regularly
- ✅ Use least-privilege AWS IAM roles
- ✅ Enable audit logging for secret access
- ✅ For external systems: Use secret operators (Sealed Secrets, External Secrets)

## Troubleshooting

### Missing Environment Variables
Check CloudWatch logs for "environment variable not set" errors.

### Invalid Credentials
Verify secrets are set correctly and not expired.

### Access Denied
Check IAM permissions for AWS resources.

## Support

For environment configuration help:
- **Technical Questions**: Pavlos Polydoras (pavlos@raw-labs.com)
- **External Deployment**: Your DevOps team
- **Template Issues**: RAW Labs Support
